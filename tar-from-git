#!/usr/bin/python
import os, sys

def call (command):
	os.system("%s > /dev/null" % command)

if len(sys.argv) != 4:
	print "Usage: build-from-git project-name version label"
	print "label can be a label or master"
	sys.exit(1)

project = sys.argv[1]
version = sys.argv[2]
label = sys.argv[3]

call("mkdir -p git-master")
call("mkdir -p git")
call("mkdir -p git-tar")

os.chdir("git-master")
if os.path.exists(project):
	print "============ PULLING ==============="
	os.chdir(project)
	call("git pull")
	os.chdir("..")
	print ""
else:
	print "============ CLONING ==============="
	call("git clone https://github.com/mate-desktop/%s.git" % project)
	print ""
os.chdir("..")

call("rm -rf git/*")
call("cp -R git-master/%s git/" % project)
os.chdir("git/%s" % project)

if label != "master":
	print "============ APPLYING LABEL %s ===============" % label
	os.system("git checkout %s" % label)
	print ""

print "============ AUTOGEN ==============="
call("./autogen.sh")
print ""

if project in ['mate-desktop']:
	print "============ MAKE ==============="
	call("make")
	print ""

print "============ MAKE DIST ==============="
call("make dist")
print ""

print "============ MAKE DISTCHECK ==============="
call("make distcheck")
print ""

call("mv %s-*.tar.xz ../" % project)
os.chdir("..")
call("rm -rf %s" % project)
os.chdir("..")
os.system("ls -al git/%s-%s.tar.xz" % (project, version))
print ""

print "============ COPY TAR ==============="
release = "git/%s-%s.tar.xz" % (project, version)
orig = "git-tar/%s_%s.orig.tar.xz" % (project, version)
build_project = "build/"
if not os.path.exists (release):
	print "ERROR: %s not found!" % release
	sys.exit(1)

call("cp %s %s" % (release, orig)) # Add the orig

os.system("ls -al git-tar/%s*" % project)
print ""