#!/usr/bin/python
import os, sys

def call (command):
	os.system("%s > /dev/null" % command)

if len(sys.argv) != 4:
	print "Usage: build-from-git project-name version label"
	print "label can be a label or master"
	sys.exit(1)

project = sys.argv[1]
version = sys.argv[2]
label = sys.argv[3]

call("mkdir -p git")
os.chdir("git")
print "============ CLONING ==============="
call("git clone https://github.com/mate-desktop/%s.git" % project)
print ""
os.chdir(project)

if label != "master":
	print "============ APPLYING LABEL %s ===============" % label
	os.system("git checkout %s" % label)
	print ""

print "============ AUTOGEN ==============="
call("./autogen.sh")
print ""

print "============ MAKE DIST ==============="
call("make dist")
call("mv %s-*.tar.xz ../" % project)
os.chdir("..")
call("rm -rf %s" % project)
os.chdir("..")
os.system("ls -al git/%s-%s.tar.xz" % (project, version))
print ""

print "============ ASSEMBLE PACKAGE ==============="
packaging = "debian-packages/%s" % project
if os.path.exists ("packages/%s" % project):
	packaging = "packages/%s" % project

release = "git/%s-%s.tar.xz" % (project, version)
orig = "build/%s_%s.orig.tar.xz" % (project, version)
build_project = "build/"
if not os.path.exists (release):
	print "ERROR: %s not found!" % release
	sys.exit(1)

call("mkdir -p build")
call("rm -rf build/%s*" % project)
call("tar xvfJ %s -C build/" % release) # Uncompress the release
call("mv build/%s* build/%s" % (project, project))
call("cp %s %s" % (release, orig)) # Add the orig
call("cp -R %s/* build/%s/" % (packaging, project)) # Add the debian dir
call("cp -R %s/.pc build/%s/" % (packaging, project)) # Add the .pc dir
os.system("ls -al build/%s*" % project)
print ""