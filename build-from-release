#!/usr/bin/python
import os, sys

if len(sys.argv) < 2:
    print "Usage: build-from-release suffix release_file"
    sys.exit(1)

suffix = sys.argv[1]
release = sys.argv[2]

if not os.path.exists (release):
    print "ERROR: %s not found!" % release
    sys.exit(1)

if ".orig" in release:
    (project, version) = release.split("/")[-1].split("_")
    version = version.replace(".orig.tar.xz", "")
else:
    dir_name = release.split("/")[-1].replace(".xz", "").replace(".tar", "")
    version = dir_name.split("-")[-1]
    project = dir_name.replace("-%s" % version, "")

print ""
print "Project: %s" % project
print "Version: %s" % version
print "Suffix:  %s" % suffix
print ""

packaging = "debian-packages/%s" % project
if os.path.exists ("packages/%s" % project):
    packaging = "packages/%s" % project

orig = "build/%s_%s.orig.tar.xz" % (project, version)
os.system("mkdir -p build")
os.system("mkdir -p debs")
os.system("rm -rf build/*")
os.system("tar xvfJ %s -C build/" % release) # Uncompress the release
os.system("mv build/%s* build/%s" % (project, project))
os.system("cp %s %s" % (release, orig)) # Add the orig
os.system("cp -R %s/* build/%s/" % (packaging, project)) # Add the debian dir
os.system("cp -R %s/.pc build/%s/" % (packaging, project)) # Add the .pc dir

if os.path.exists ("changelogs/%s" % project):
    # overwrite the changelog
    os.system("cp changelogs/%s/debian/changelog build/%s/debian/changelog" % (project, project))

# LOCAL BUILD
os.chdir("build/%s" % project)
os.system("mint-build -i -s %s" % suffix)
os.system("cp ../*.deb ../../debs/")
