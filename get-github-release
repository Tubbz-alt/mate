#!/usr/bin/python
import os, sys

def call (command):
    os.system("%s > /dev/null" % command)

if len(sys.argv) != 4:
    print "Usage: get-github-release project-name version label"
    print "label can be a label or master"
    sys.exit(1)

project = sys.argv[1]
version = sys.argv[2]
label = sys.argv[3]

dir_name = "%s-%s" % (project, version)
tar_archive = "%s.tar" % dir_name
xz_archive = "%s.xz" % tar_archive

call("mkdir -p github-releases")
os.chdir("github-releases")

#cleanup
for path in [project, dir_name, tar_archive, xz_archive]:
    if os.path.exists(path):
        call("rm -rf %s" % path)

print "============ CLONING ==============="
call("git clone https://github.com/mate-desktop/%s.git" % project)
print ""

if label != "master":
    print "============ APPLYING LABEL %s ===============" % label
    os.chdir(project)
    os.system("git checkout %s" % label)
    os.chdir("..")
    print ""

call("mv %s %s" % (project, dir_name))

print "============ MAKE TAR ==============="
call ("tar cvf %s %s/" % (tar_archive, dir_name))
print ""

print "============ XZ COMPRESS ==============="
call ("xz %s" % tar_archive)
print ""

if not os.path.exists (xz_archive):
    print "ERROR: github-releases/%s not found!" % xz_archive
    sys.exit(1)
else:
    for path in [project, dir_name, tar_archive]:
        if os.path.exists(path):
            call("rm -rf %s" % path)
    os.chdir("..")
    os.system("ls -al github-releases/%s" % xz_archive)

print ""
